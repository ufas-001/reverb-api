// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email         String           @unique
  name          String?
  password      String
  conversations Conversation[]
  bookmarks     ArticleLink[]    @relation("article")
  preferences   UserPreferences?
  apiKey        ApiKey?
}

// user.model.prisma
model ChatUser {
  id            String    @id @default(uuid())
  uniqueId      String         @unique
  createdAt     DateTime       @default(now())
  conversations Conversation[]
}

// conversation.model.prisma
model Conversation {
  id         String    @id @default(uuid())
  adminId    String?
  accepted   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  messages   Message[] // Define the messages field as an array of Message
  admin      User?     @relation(fields: [adminId], references: [id])
  chatUser   ChatUser  @relation(fields: [chatUserId], references: [id])
  chatUserId String
}

// message.model.prisma
model Message {
  id            String    @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  senderType     String
  content        String
  createdAt      DateTime     @default(now())
}

model ArticleLink {
  id             String    @id @default(uuid())
  header         String
  link           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], name: "article")
  apiKey         String
  apiKeyRelation ApiKey   @relation(fields: [apiKey], references: [key])
}

model UserPreferences {
  id              String    @id @default(uuid())
  textColor       String
  bannerColor     String
  apiKey          String @unique
  userId          String    @unique
  apiKeyRelation  ApiKey @relation(fields: [apiKey], references: [key])
  user            User   @relation(fields: [userId], references: [id])
}

model ApiKey {
  id              String    @id @default(uuid())
  key             String           @unique
  userId          String              @unique
  user            User             @relation(fields: [userId], references: [id])
  createdAt       DateTime         @default(now())
  userPreferences UserPreferences?
  articleLinks    ArticleLink[]
  questions       Question[]
}

model Question {
  id               String   @id @default(uuid()) // Using UUID for ID
  text             String
  parentQuestionId String? // Self-referencing for nested questions
  parentOptionId   String? // Linking to the parent option, if exists
  apiKey           String // Relation to track which API key created this question
  apiKeyRelation   ApiKey   @relation(fields: [apiKey], references: [key]) // Setting up the relation
  options          Option[] // Each question has multiple options
  nestedQuestions  Option[] @relation("NestedQuestions") // Relation for nested questions
}

model Option {
  id             String    @id @default(uuid()) // Using UUID for option ID
  text           String
  questionId     String
  question       Question  @relation(fields: [questionId], references: [id])
  nextQuestionId String? // Linking to the next question if nested
  nextQuestion   Question? @relation("NestedQuestions", fields: [nextQuestionId], references: [id]) // Relation to next question
}
